#####
# FILENAME: alarm_manager.py
#####
CODE:
class AlarmManager:
    def check_alarms(self, sensor_data):
        # Example: Check for over-threshold values and increasing trends
        alarms = []
        for sensor_id, data in sensor_data.items():
            if max(data) > 90:  # Threshold check
                alarms.append(f"{sensor_id} exceeded threshold")
            if len(data) > 2 and data[-1] > data[-2] > data[-3]:  # Increasing trend
                alarms.append(f"{sensor_id} showing increasing trend")
        return alarms


#####
# FILENAME: config.py
#####
CODE:
# config.py
# Central configuration for the sensor system. Defines mappings for both analog and digital sensors, 
# including their types, channels for analog sensors, and pins for digital sensors.

settings = {
    'sensor_mapping': {
        # Define analog sensors with their respective ADC channels
        'sensor1': {'type': 'analog', 'channel': 0},
        'sensor2': {'type': 'analog', 'channel': 1},
        # Define digital sensors with their respective GPIO pins
        'sensor3': {'type': 'digital', 'pin': 17},
        'sensor4': {'type': 'digital', 'pin': 27},
    },
    # Data logging interval in seconds
    'data_logging_interval': 60,
    # GUI update interval in milliseconds
    'gui_update_interval': 1000,
    # Additional settings can be added here
}


#####
# FILENAME: data_logger.py
#####
CODE:
import csv
from datetime import datetime

class DataLogger:
    def log_data(self, sensor_data):
        # Example: log data to a CSV file
        filename = datetime.now().strftime("%Y-%m-%d") + ".csv"
        with open(filename, 'a', newline='') as file:
            writer = csv.writer(file)
            # Assuming you want to log the timestamp, sensor IDs, and their readings
            row = [datetime.now().strftime("%H:%M:%S")] + [sensor_id for sensor_id in sensor_data] + [sensor_data[sensor_id] for sensor_id in sensor_data]
            writer.writerow(row)

#####
# FILENAME: gui_manager.py
#####
CODE:
import tkinter as tk
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
from matplotlib.figure import Figure

class GUIManager:
    def __init__(self, root, sensor_manager, data_logger, alarm_manager):
        self.root = root
        self.sensor_manager = sensor_manager
        self.data_logger = data_logger
        self.alarm_manager = alarm_manager
        self.figure = Figure(figsize=(5, 4), dpi=100)
        self.plot = self.figure.add_subplot(111)
        self.canvas = FigureCanvasTkAgg(self.figure, master=self.root)
        self.sensor_data = {sensor_id: [] for sensor_id in sensor_manager.get_sensor_ids()}
        self.auto_update_interval = 1000  # Define auto_update_interval here
        self.setup_ui()

    def start_auto_update(self):
        self.update_sensor_readings()  # Update the sensor readings
        # Schedule the next call to this method after the specified interval
        self.root.after(self.auto_update_interval, self.start_auto_update)
    
    def setup_ui(self):
        self.canvas.get_tk_widget().pack(side=tk.TOP, fill=tk.BOTH, expand=True)
        self.update_button = tk.Button(self.root, text="Read Sensors", command=self.update_sensor_readings)
        self.update_button.pack(side=tk.BOTTOM)
        self.start_auto_update()  # Start automatic updates

    def update_sensor_readings(self):
        for sensor_id in self.sensor_manager.get_sensor_ids():
            data = self.sensor_manager.read_sensor(sensor_id)
            self.sensor_data[sensor_id].append(data)
        
        self.plot.clear()
        for sensor_id, data in self.sensor_data.items():
            self.plot.plot(data, label=sensor_id)
        
        self.plot.legend()
        self.canvas.draw()

#####
# FILENAME: main.py
#####
CODE:
import tkinter as tk
from gui_manager import GUIManager
from sensor_manager import SensorManager
from data_logger import DataLogger
from alarm_manager import AlarmManager
import threading
import time

def automatic_data_logging(sensor_manager, data_logger):
    while True:
        sensor_data = {sensor_id: sensor_manager.read_sensor(sensor_id) for sensor_id in sensor_manager.get_sensor_ids()}
        data_logger.log_data(sensor_data)
        time.sleep(60)  # Log data every 60 seconds

def main():
    root = tk.Tk()
    sensor_manager = SensorManager()
    data_logger = DataLogger()
    alarm_manager = AlarmManager()  # Assuming it might need sensor_manager for conditions
    gui_manager = GUIManager(root, sensor_manager, data_logger, alarm_manager)
    
    data_logging_thread = threading.Thread(target=automatic_data_logging, args=(sensor_manager, data_logger), daemon=True)
    data_logging_thread.start()
    
    root.mainloop()

if __name__ == "__main__":
    main()

#####
# FILENAME: sensor_manager.py
#####
CODE:
import RPi.GPIO as GPIO
import Adafruit_ADS1x15
from config import settings  # Import settings from config.py

class SensorManager:
    def __init__(self):
        # Initialize the ADC device for reading analog sensors
        self.adc = Adafruit_ADS1x15.ADS1115()
        # Load sensor configurations from settings
        self.sensor_mapping = settings['sensor_mapping']
        self.gain = 1  # Gain for ADC readings
        
        # Setup GPIO mode for digital sensor pins
        GPIO.setmode(GPIO.BCM)
        # Initialize each digital sensor pin as input
        for sensor_id, sensor_info in self.sensor_mapping.items():
            if sensor_info['type'] == 'digital':
                pin = sensor_info['pin']
                GPIO.setup(pin, GPIO.IN)  # Using 'pin' here makes it clear

    def read_sensor(self, sensor_id):
        # Retrieve sensor configuration
        sensor_info = self.sensor_mapping[sensor_id]
        # Read and return data from the specified sensor
        if sensor_info['type'] == 'analog':
            return self.adc.read_adc(sensor_info['channel'], gain=self.gain)
        elif sensor_info['type'] == 'digital':
            return GPIO.input(sensor_info['pin'])
        else:
            raise ValueError("Invalid sensor type")

    def get_sensor_ids(self):
        # Return a list of all configured sensor IDs
        return list(self.sensor_mapping.keys())

# Test code
if __name__ == "__main__":
    sensor_manager = SensorManager()  # Initialize SensorManager
    sensor_ids = sensor_manager.get_sensor_ids()  # Get all sensor IDs

    print("Testing sensor readings...")
    for sensor_id in sensor_ids:  # Correct variable name here
        reading = sensor_manager.read_sensor(sensor_id)  # Use sensor_id, not sensor_ids
        print(f"Sensor {sensor_id}: {reading}")
